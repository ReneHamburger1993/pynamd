#!/usr/bin/env python
from __future__ import division, print_function
import argparse
import sys
import math
import warnings

import numpy as np
# from scipy.optimize import curve_fit, OptimizeWarning

from pynamd import TitratableSystemSet


# BOLTZMANN = 0.001987191
parser = argparse.ArgumentParser()
# Required arguments
parser.add_argument('cphlog', type=str, nargs='*', default=[],
    help='Any number of namdcph cphlog files'
)
parser.add_argument('--json', type=str, nargs='*', default=[],
    help='cph JSON configuration files used during the simulation'
)
# Options for reading data
data = parser.add_argument_group('data reading options')
data.add_argument('--start', type=int, default=0,
    help='First step to consider when subsampling'
)
data.add_argument('--stop', type=int, default=None,
    help='Last step to consider when subsampling'
)
data.add_argument('--step', type=int, default=None,
    help='Interval at which to subsample'
)
# Options for types of analysis
analysis = parser.add_argument_group('analysis options')
analysis.add_argument('--micro', action='store_true',
    help='Analyze microscopic states separately'
)
analysis.add_argument('--noequiv', action='store_true',
    help='Analyze a priori equivalent microscopic states separately'
)

analysis.add_argument('--wald', '--naive', action='store_true',
    help='Use the (naive) Wald method for population estimation'
)
analysis.add_argument('--yates', action='store_true',
    help='Use the Yates method for population estimation'
)
analysis.add_argument('--agresti_coull', action='store_true',
    help='Use the Agresti-Coull method for population estimation'
)
analysis.add_argument('-z', type=float, default=1.0,
    help=('Confidence parameter for the estimator.'
          ' z = z_a/2 is the 100(1 - a/2) percentile of the standard normal'
         )
)
# currently the default
# analysis.add_arugment('--msmle_uwham', action='store_true')
analysis.add_argument('--msmle_opt', type=str, default='trust-ncg',
    help='Scipy minimizer to use for MSMLE'
)

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit()
args = parser.parse_args()
if len(args.json) == 0:
    print('Must specify at least one cph JSON config file.')
    sys.exit()
if args.stop < 0 or args.stop < args.start:
    args.stop = None

if args.wald:
    args.method = 'wald'
elif args.yates:
    args.method = 'yates'
elif args.agresti_coull:
    args.method = 'agresti-coull'
else:
    args.method = 'uwham'
if args.noequiv:
    args.micro = True

# Read in, subsample, and sort all of the data.
tset = TitratableSystemSet.from_cphlogs(args.cphlog, args.json,
                                        args.start, args.stop, args.step)
pHs, npHs, nsamples = tset.pHs, tset.numpHs, tset.nsamples
# Print a quick report regarding what was read.
print('# Read %d cphlog files (%d pH values)'%(len(args.cphlog), npHs))
print('# %5s %8s'%('pH', 'nsamples'))
for pH, n in zip(pHs, nsamples):
    print('# %5.2f %8d'%(pH, n))

kopts = {'z': args.z, 'method': args.msmle_opt}
opts = (args.micro, args.noequiv, args.method)
titration_curves, titration_curve_errs = \
        tset.compute_titration_curves(*opts, **kopts)

# Print the output.
print('#    ', end='')
for tres in tset.residues:
    print(' %-13s'%tres.segresidname, end='')
print()
for pH, tc, tc_err in zip(pHs, titration_curves.T, titration_curve_errs.T):
    print('%5.2f'%pH, end='')
    for p, perr in zip(tc, tc_err):
        print(' %6.4f %6.4f'%(p, perr), end='')
    print()

#warnings.simplefilter("error", OptimizeWarning)
#fit_pKas = np.zeros((titration_curves.shape[0], npHs))
#print('#fit ', end='')
#i = 0
#for tres in tset.residues:
#    if args.micro:
#        # Might be one or more titration curves.
#        npKas = (tres.nsites if args.noequiv else tres.nstates)
#    else:
#        npKas = 1
    # NB: Correlated curves are currently treated as interchangeable.
#    tc = titration_curves[i]
#    tc_err = titration_curve_errs[i]
    # I need to better understand why this works...
#    scale = 1.0 if (tres.nstates == 1 or tres.nsites != tres.nstates) else -1.0 
#    if npKas == 2:
#        def tcurve(pH, *params):
#            pKa1, pKa2 = params[0], params[1]
#            dpKa = scale*(pKa2 - pKa1)
#            dpH = scale*(pH - pKa1)
#            return 1 / (1 + 10**dpKa + 10**dpH)
#    else:
#        def tcurve(pH, *params):
#            pKa = params[0]
#            dpH = scale*(pH - pKa)
#            return 1 / (1 + 10**dpH)
#    pHguess = pHs.mean() + np.zeros(npKas)
#    try:
#    popt, pcov = curve_fit(tcurve, pHs, tc, pHguess, tc_err)
#    perr = np.sqrt(np.diag(pcov))
#    except OptimizeWarning: 
#        pass 
        
#    for opt, err in zip(popt, perr):
#        print(' %6.4f %6.4f'%(opt, err), end='')
#    i += npKas
#print()

