#!/usr/bin/env python
from __future__ import division, print_function
import argparse
import sys

import numpy as np

from pynamd import TitratableSystemSet


parser = argparse.ArgumentParser()
# Required arguments
parser.add_argument('cphlog', type=str, nargs='*', default=[],
    help='Any number of namdcph cphlog files'
)
required = parser.add_argument_group('required non-positional arguments')
required.add_argument('--json', type=str, nargs='*', default=[],
    help='cph JSON file(s) used during the simulation'
)
# Options for selecting residues
selection = parser.add_argument_group('residue selection options')
selection.add_argument('--segresids', type=str, nargs='*', default=[],
    help=('Select specific residues for analysis with the format'
          '<segid>:<resid>')
)
selection.add_argument('--notsegresids', type=str, nargs='*', default=[],
    help=('Exclude specific residues from analysis with the format'
          '<segid>:<resid>')
)
selection.add_argument('--resnames', type=str, nargs='*', default=[],
    help='Select specific residues for analysis by residue name'
)
selection.add_argument('--notresnames', type=str, nargs='*', default=[],
    help='Exclude specific residues from analysis by residue name'
)
# Options for reading data
data = parser.add_argument_group('data reading options')
data.add_argument('--start', type=int, default=0,
    help='First step to consider when subsampling'
)
data.add_argument('--stop', type=int, default=None,
    help='Last step to consider when subsampling'
)
data.add_argument('--step', type=int, default=None,
    help='Interval at which to subsample'
)
# Options for types of analysis
analysis = parser.add_argument_group('analysis options')
analysis.add_argument('--micro', action='store_true',
    help='Analyze microscopic states separately'
)
analysis.add_argument('--noequiv', action='store_true',
    help='Analyze a priori equivalent microscopic states separately'
)

analysis.add_argument('--wald', '--naive', action='store_true',
    help='Use the (naive) Wald method for population estimation'
)
analysis.add_argument('--yates', action='store_true',
    help='Use the Yates method for population estimation'
)
analysis.add_argument('--agresti_coull', action='store_true',
    help='Use the Agresti-Coull method for population estimation'
)
analysis.add_argument('-z', type=float, default=1.0,
    help=('Confidence parameter for the estimator.'
          ' z = z_a/2 is the 100(1 - a/2) percentile of the standard normal'
         )
)
# currently the default
# analysis.add_arugment('--msmle_uwham', action='store_true')
analysis.add_argument('--msmle_opt', type=str, default='trust-ncg',
    help='Scipy minimizer to use for MSMLE'
)
analysis.add_argument('--nohill', action='store_true',
    help='Do not perform Hill analysis'
)
analysis.add_argument('--hilldecomp', type=str, default=None, 
    help='Perform Hill decomposition and output to this file.'
)

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit()
args = parser.parse_args()
if len(args.json) == 0:
    print('Must specify at least one cph JSON config file.')
    sys.exit()
if args.stop < 0 or args.stop < args.start:
    args.stop = None

args.method = 'uwham'
args.method = ('wald' if args.wald else args.method)
args.method = ('yates' if args.yates else args.method)
args.method = ('agresti-coull' if args.agresti_coull else args.method)

args.micro = (True if args.noequiv else args.micro)

#
# Read in, subsample, and sort all of the data.
#
tset = TitratableSystemSet.from_cphlogs(args.cphlog, args.json,
                                        args.start, args.stop, args.step)
pHs, npHs, nsamples = tset.pHs, tset.numpHs, tset.nsamples

#
# Print a quick report regarding what was read.
#
print('# Read %d cphlog files (%d pH values)'%(len(args.cphlog), npHs))
print('# %5s %8s'%('pH', 'nsamples'))
for pH, n in zip(pHs, nsamples):
    print('# %5.2f %8d'%(pH, n))

#
# Each value in tcurve_dict is an ndarray with one or more titration curves.
# The key for each value is the <segid:resid:resname> identifier for that
# residue.
#
kopts = {'method': args.msmle_opt}
tcurve_dict = tset.compute_titration_curves(
    args.segresids, args.notsegresids, args.resnames, args.notresnames,
    args.micro, args.noequiv, args.method, args.z, **kopts
)

def space_columns(colcnt):
    """Add whitespace so that lines wrap at 80 characters. This alignment
    assumes a 5 char label and then 5 14 character columns.
    """
    colcnt += 1
    spacer = ''
    if colcnt == 5:
        spacer = ' '*10
        colcnt = 0
    return colcnt, spacer

#
# Print a header with residue information (<segid:resid:resname>).
#
colcnt = 0
header = '#    '
for segresidname, tcurve in tcurve_dict.iteritems(): 
    colcnt, spacer = space_columns(colcnt)
    header += ' %-13s'%(segresidname) + spacer
    for i in xrange(tcurve[0].shape[0] - 1):
        colcnt, spacer = space_columns(colcnt) 
        header += ' '*14 + spacer
print(header.rstrip())

#
# Print the titration curves per state.
#
for i, pH in enumerate(pHs):
    colcnt = 0
    line = '%5.2f'%pH
    for (tcs, tc_errs) in tcurve_dict.itervalues():
        for p, perr in zip(tcs[:, i], tc_errs[:, i]):
            colcnt, spacer = space_columns(colcnt)
            line += ' %6.4f %6.4f'%(p, perr) + spacer
    print(line.rstrip())

if args.wald or args.yates or args.agresti_coull or args.nohill:
    sys.exit()

#
# Hill analysis (may be time consuming) - requires a multistate estimator 
#
dohilldecomp = (args.hilldecomp is not None)
opts = (args.micro, args.noequiv, dohilldecomp)
colcnt = 0
line1 = '#pKa '
line2 = '#hill'
hilloutput = []
hilllabels = []
for segresidname in tcurve_dict.iterkeys():
    try:
        pKas, hillcoeffs = tset.compute_Hill_fit(segresidname, *opts)
        for pKa, hillcoeff in zip(pKas, hillcoeffs):
            colcnt, spacer = space_columns(colcnt)
            line1 += '        %6.4f'%pKa + spacer
            if not dohilldecomp:
                line2 += '        %6.4f'%hillcoeff + spacer
            else:
                line2 += '        %6.4f'%hillcoeff.sum() + spacer
                hilloutput.append(hillcoeff)
                hilllabels.append(segresidname)
    except ValueError:
        nstates = tcurve_dict[segresidname][1].shape[0]
        for i in xrange(nstates):
            colcnt, spacer = space_columns(colcnt)
            line1 += ' '*12 + '--' + spacer
            line2 += ' '*12 + '--' + spacer
print(line1.rstrip())
print(line2.rstrip())
print("# nan indicates the pKa is probably outside the given pH range")
print("# -- indicates that this micro/noequiv is not implemented")
if dohilldecomp:
    hilloutfile = open(str(args.hilldecomp), 'w')
    hilloutfile.write('%-14s'%'residues')
    for label in hilllabels:
        hilloutfile.write(' %-13s'%label)
    hilloutfile.write('\n')
    x = np.asarray(hilloutput).T
    for segresid, resname, hillcoeffs in zip(tset.segresids(), tset.resnames(), x):
        hilloutfile.write('%-14s'%(':'.join([segresid, resname])))
        for hillcoeff in hillcoeffs:
#            hillcoeff = (hillcoeff if hillcoeff != 1.0 else 0.0)
            hilloutfile.write(' % 13.4f'%hillcoeff)
        hilloutfile.write('\n')
    hilloutfile.close()

